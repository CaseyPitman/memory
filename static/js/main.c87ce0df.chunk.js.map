{"version":3,"sources":["img sync /^/.//.*$","img/card-back.jpg","img/castle.jpg","img/dragon.jpg","img/key.jpg","img/moon.jpg","img/unicorn.jpg","img/wizard.jpg","data.js","title.js","cards.js","board.js","button.js","App.js","index.js"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","deck","name","img","status","Title","className","Card","props","image","altText","onClick","event","currentUpturnCards","length","clickCard","src","require","alt","Board","boardStyle","gameInProgress","display","cards","board","card","key","style","Button","clickHandler","clickButton","buttonType","this","Component","App","type","sortedDeck","i","j","Math","floor","random","temp","setState","cardsUpCounter","checkMatch","console","log","checkWin","state","a","turnedCards","turnCardUp","currentCard","flippedCard","push","posMatch","includes","updatedBoard","negMatch","setTimeout","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c87ce0df.chunk.js","sourcesContent":["var map = {\n\t\"./card-back.jpg\": 18,\n\t\"./castle.jpg\": 19,\n\t\"./dragon.jpg\": 20,\n\t\"./key.jpg\": 21,\n\t\"./moon.jpg\": 22,\n\t\"./unicorn.jpg\": 23,\n\t\"./wizard.jpg\": 24\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 17;","module.exports = __webpack_public_path__ + \"static/media/card-back.5d49e223.jpg\";","module.exports = __webpack_public_path__ + \"static/media/castle.34c88292.jpg\";","module.exports = __webpack_public_path__ + \"static/media/dragon.4edb5de8.jpg\";","module.exports = __webpack_public_path__ + \"static/media/key.6c2fc9d5.jpg\";","module.exports = __webpack_public_path__ + \"static/media/moon.d7c86c55.jpg\";","module.exports = __webpack_public_path__ + \"static/media/unicorn.9278e609.jpg\";","module.exports = __webpack_public_path__ + \"static/media/wizard.d3a4376b.jpg\";","// This the inital array of cards, unsorted.\n\nlet deck = [\n   {\n      id: 0,\n      name: 'dragon',\n      img: 'dragon.jpg',\n      status: 'down'  //or up or match\n   },\n   {\n      id: 1,\n      name: 'dragon',\n      img: 'dragon.jpg',\n      status: 'down'\n   },\n   {\n      id: 2,\n      name: 'castle',\n      img: 'castle.jpg',\n      status: 'down'\n   },\n   {\n      id: 3,\n      name: 'castle',\n      img: 'castle.jpg',\n      status: 'down'\n   },\n   {\n      id: 4,\n      name: 'key',\n      img: 'key.jpg',\n      status: 'down'\n   },\n   {\n      id: 5,\n      name: 'key',\n      img: 'key.jpg',\n      status: 'down'\n   },\n   {\n      id: 6,\n      name: 'moon',\n      img: 'moon.jpg',\n      status: 'down'\n   },\n   {\n      id: 7,\n      name: 'moon',\n      img: 'moon.jpg',\n      status: 'down'\n   },\n   {\n      id: 8,\n      name: 'wizard',\n      img: 'wizard.jpg',\n      status: 'down'\n   },\n   {\n      id: 9,\n      name: 'wizard',\n      img: 'wizard.jpg',\n      status: 'down'\n   },\n   {\n      id: 10,\n      name: 'unicorn',\n      img: 'unicorn.jpg',\n      status: 'down'\n   },\n   {\n      id: 11,\n      name: 'unicorn',\n      img: 'unicorn.jpg',\n      status: 'down'\n   }\n];\n\nexport default deck;","import React from 'react'\n\n// This module creates the title.\n\nlet Title = () => {\n   return(\n      <h1 className = 'title'> Memory </h1>\n   )\n}\n\nexport default Title;","//This module renders the cards for the memory game.\n\nimport React from 'react';\nimport deck from './data'\n\n\nlet Card = (props) => {\n\n   //Card is clicked.\n   let clickHandler = (event) => {\n      //Prevents player from clicking the card if it is already matched, it is already face up, or there are two card currently turned up for comparison.\n      if (props.status === 'match' || props.status === 'up'|| props.currentUpturnCards.length === 2){\n         return;\n      }\n      let id = props.id;\n      props.clickCard(id);\n\n   }\n\n   //Determine how to display card\n   //(Face up, face down, or matched)\n   let className = 'card';\n   let image = 'card-back.jpg'\n   let altText = 'Bock of card'\n   //Default - card face down\n   if (props.status === 'down'){\n      className += ' face-down';\n   } else if (props.status === 'up'){\n      className += ' up';\n      image = props.image;\n      altText = props.name;\n   } else if (props.status === 'match'){\n      className += ' match';\n      image = props.image;\n      altText = props.name;\n   }\n\n   return(\n      <div className = {className} onClick = {clickHandler}>\n         <img className = 'card-img' src = {require(`./img/${image}`)} alt = {altText}></img>\n      </div>\n   )\n   \n}\n\nexport default Card;","// This Module renders the game board\n\nimport React from 'react';\nimport Card from './cards'\n\nlet Board = (props) => {\n\n   //If game is not yet in progress, the board is not visible. \n\n   let boardStyle = {};\n   if (!props.gameInProgress){\n      boardStyle = {\n         display: 'none'\n      }\n   }\n\n   //Get cards\n   let renderCards = (card) => {\n      return (\n         <Card\n            key = {card.id} \n            id = {card.id}\n            image = {card.img}\n            clickCard = {props.clickCard}\n            status = {card.status}\n            name = {card.name}\n            currentUpturnCards = {props.currentUpturnCards}\n         />\n      )\n   }\n\n\n   //Map board to generate cards\n   let cards = props.board.map(renderCards)\n\n   return (\n      <div className = 'board' style = {boardStyle}>\n         {cards}       \n      </div>\n   )\n}\n\nexport default Board;","// This module renders the start/reset button\n\nimport React, {Component} from 'react';\n\n\nclass Button extends Component {\n\n   //Click handler for the button\n   clickHandler = (props) => {\n      this.props.clickButton(this.props.buttonType);\n   }\n\n   //Button text and context changes based on the stage of gameplay.\n\n   render(){\n      return (\n         <div className = 'button-div' >\n            <button className = 'button' onClick = {this.clickHandler}>{this.props.buttonType} </button>\n         </div>\n      )\n   }\n}\n\nexport default Button;","import React, {Component} from 'react';\n//CSS styles\nimport styles from './styles.css';\n\n// Data\nimport deck from  './data'\n\n// Components\nimport Title from './title';\nimport Board from './board';\nimport Button from './button';\n\n\nclass App extends Component {\n  constructor(props){\n    super()\n\n    this.state = {\n      gameInProgress: false,\n      board: deck,\n      buttonType: 'Start', //Or quit or Play again\n      cardsUpCounter: 0,\n      currentUpturnCards: []\n      \n    }\n  }\n\n  //Click the button to start, end, or replay the game.\n  clickButton = (type) => {\n\n    if (type !== 'Quit'){\n      //Player is starting the game or playing another game after finishing.\n      let sortedDeck = deck;\n      //Fisher-Yates algorithm to shuffle the cards and start the game\n      for (let i = sortedDeck.length - 1; i > 0; i--){\n        const j = Math.floor(Math.random() * i);\n        const temp = sortedDeck[i];\n        sortedDeck[i] = sortedDeck[j];\n        sortedDeck[j] = temp;\n      }\n      \n      this.setState({\n        gameInProgress: true,\n        board: sortedDeck,\n        buttonType: 'Quit',\n        cardsUpCounter: 0\n      })\n   \n    }\n       //Player wants to quit playing\n       else {\n        this.setState({\n          gameInProgress: false,\n          buttonType: 'Start'\n        })\n      }\n  }\n\n  //Check to see if two cards match\n  checkMatch = (cards) =>{\n    console.log(cards)\n    return cards[0] === cards[1]? true : false;\n  }\n\n  //Check to see if the game has been completed. If so, offer to play again.\n  checkWin = () => {\n    if (this.state.cardsUpCounter === 12){\n      console.log('game over')\n      this.setState({\n        buttonType: 'Play Again'\n      })\n    }\n  }\n\n  //Player clicks a card.\n  clickCard = async (id) => {\n\n    let turnedCards = this.state.currentUpturnCards;\n    let currentCard;\n\n    //Flip the clicked card. \n    let turnCardUp = (card) => {\n      //Identify the card to be flipped. \n      if (card.id !== id){\n        return card;\n      } else {\n        currentCard = card;\n        return {\n          ...card, \n          status: 'up'\n        }\n      }\n    }\n      \n      let flippedCard = this.state.board.map(turnCardUp);\n      \n      turnedCards.push(currentCard.name);\n      \n      this.setState({\n        board: flippedCard,\n        currentUpturnCards: turnedCards\n      })\n\n      //Do this if the two flipped cards match\n      let posMatch = (card) =>{\n        if (!this.state.currentUpturnCards.includes(card.name)){\n          return card;\n        } else {\n          return{\n            ...card,\n            status: 'match',\n          }\n        }\n      }\n\n    \n      let updatedBoard =[];\n      // If there are currently two cards facing up\n      if (this.state.currentUpturnCards.length === 2){\n\n        //Compare the two cards for a match\n        let check = this.checkMatch(turnedCards);\n\n        //There is a match. Set state to match.\n        if (check){\n          updatedBoard = this.state.board.map(posMatch);\n\n          await this.setState({\n            board: updatedBoard,\n            currentUpturnCards:[], \n            cardsUpCounter: this.state.cardsUpCounter + 2\n          })\n          //Check for a win. \n          this.checkWin();\n        } \n\n        //No match. Pause and flip cards back over. \n        else {\n          //Flips the unmatched cards to face down.\n          let negMatch = (card) =>{\n            if (!this.state.currentUpturnCards.includes(card.name)){\n              return card;\n            } else {\n              return{\n                ...card,\n                status: 'down',\n              }\n            }\n          }\n\n          //Show both unmatched cards for a moment before flipping back over. \n          setTimeout(() => {\n            updatedBoard = this.state.board.map(negMatch);this.setState({\n            board: updatedBoard,\n            currentUpturnCards:[]\n          })\n          }, 1500)\n        }\n      }\n    }\n\n  \n  render(){\n    return (\n      <div className=\"App\">\n        <Title />\n\n        <Board\n          gameInProgress = {this.state.gameInProgress}\n          board = {this.state.board}\n          clickCard = {this.clickCard}\n          currentUpturnCards = {this.state.currentUpturnCards}\n        />\n\n        <Button \n          buttonType = {this.state.buttonType}\n          clickButton = {this.clickButton}\n        />\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}